var documenterSearchIndex = {"docs":
[{"location":"code/#Code","page":"Code","title":"Code","text":"","category":"section"},{"location":"code/","page":"Code","title":"Code","text":"Here lie all of the docstrings in the PokemonCartographer.jl codebase.","category":"page"},{"location":"code/","page":"Code","title":"Code","text":"Modules = [PokemonCartographer,\n           PokemonCartographer.Nav,\n           PokemonCartographer.Worker,\n          ]","category":"page"},{"location":"code/#PokemonCartographer.explore-Tuple{}","page":"Code","title":"PokemonCartographer.explore","text":"Create a Navmesh by playing the game.\n\nStarting with a list of roms and save states, spawn a worker for each pair and merge the resulting navmeshes.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.genbatch-Tuple{Vector{String}, Int64, Int64, MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, Vector{PokemonCartographer.Nav.Position}}","page":"Code","title":"PokemonCartographer.genbatch","text":"Generate a batch of jobs to run\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.Navmesh-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C}","page":"Code","title":"PokemonCartographer.Nav.Navmesh","text":"Navmesh(a::Navmesh, b::Navmesh)::Navmesh\n\nMerge two Navmeshes - a and b - into a new Navmesh.\n\nPrioritizes edges to somewhere over edges to nowhere when resolving conflicts.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.Navmesh-Tuple{}","page":"Code","title":"PokemonCartographer.Nav.Navmesh","text":"Navmesh()::Navmesh\n\nCreate a new Navmesh.\n\nIncludes the nowheres as a fully connected graph. This way the nowheres always exist and are considered \"fully explored\"(.)\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.Navmesh!-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C}","page":"Code","title":"PokemonCartographer.Nav.Navmesh!","text":"Navmesh!(a0::Navmesh, a::Navmesh)::Nothing\n\nMerge a into a0 in place. See Navmesh(a::Navmesh, b::Navmesh)::Navmesh for more details.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.Navmesh!-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Direction}","page":"Code","title":"PokemonCartographer.Nav.Navmesh!","text":"Navmesh!(n::Navmesh, from::Position, to::Position, d::Direction)::Nothing\n\nAdd an edge in n between from and to labeled as direction d.\n\nfrom and to do not need to exist.\n\nThis will overwrite any previous edge between these two nodes.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.asbutton-Tuple{PokemonCartographer.Nav.Direction}","page":"Code","title":"PokemonCartographer.Nav.asbutton","text":"asbutton(d::Direction)::Button\n\nConvert directions to buttons.\n\nExamples\n\nasbutton(Up)\n\n# output\n\nButtonUp::Button = 64\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.asdirection-Tuple{GameBoy.Button}","page":"Code","title":"PokemonCartographer.Nav.asdirection","text":"asdirection(b::Button)::Direction\n\nConvert buttons to directions.\n\nExamples\n\nasdirection(ButtonUp)\n\n# output\n\nUp::Direction = 0\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.asdirection-Tuple{UInt8}","page":"Code","title":"PokemonCartographer.Nav.asdirection","text":"asdirection(facing::UInt8)::Direction\n\nconvert facing byte to direction\n\nExamples\n\nasdirection(0x04)\n\n# output\n\nUp::Direction = 0\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.asnowhere-Tuple{GameBoy.Button}","page":"Code","title":"PokemonCartographer.Nav.asnowhere","text":"asnowhere(b::Button)::Position\n\nFind the correct nowhere location.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.connected-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Position}","page":"Code","title":"PokemonCartographer.Nav.connected","text":"connected(n::Navmesh, from::Position, to::Position)::Bool\n\nPredicate to check if two nodes are connected.\n\nExamples\n\nn = Navmesh()\np1 = Position(0x01, 0x01, 0x01)\np2 = Position(0x01, 0x01, 0x02)\np3 = Position(0x01, 0x02, 0x02)\nNavmesh!(n, p1, p2, Down)\nNavmesh!(n, p2, p3, Right)\n\nconnected(n, p1, p3)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.goesnowhere-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Direction}","page":"Code","title":"PokemonCartographer.Nav.goesnowhere","text":"goesnowhere(n::Navmesh, p::Position, d::Direction)::Bool\n\nPredicate to check if a direction goes to nowhere.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.goessomewhere-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Direction}","page":"Code","title":"PokemonCartographer.Nav.goessomewhere","text":"goessomewhere(n::Navmesh, p::Position, d::Direction)::Bool\n\nPredicate to check if a direction exists goes to somewhere.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.randomincomplete-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, Vector{PokemonCartographer.Nav.Position}}","page":"Code","title":"PokemonCartographer.Nav.randomincomplete","text":"randomincomplete(n::Navmesh, nogolist::Vector{Position})::Union{Position, Nothing}\n\nSelect a random, incomplete vertex in the navmesh. Incomplete vertices have less than four outedges - e.g. Up, Down, Left, Right.\n\n\n\n\n\n","category":"method"},{"location":"code/#PokemonCartographer.Nav.route-Tuple{MetaGraphsNext.MetaGraph{C, Graphs.SimpleGraphs.SimpleDiGraph{C}, PokemonCartographer.Nav.Position, Nothing, PokemonCartographer.Nav.Direction, Nothing} where C, PokemonCartographer.Nav.Position, PokemonCartographer.Nav.Position}","page":"Code","title":"PokemonCartographer.Nav.route","text":"route(n::Navmesh, from::Position, to::Position)::Vector{Direction}\n\nFind a route between from and to in the provided Navmesh, n.\n\nIf no route exists an empty Vector will be returned instead.\n\nExamples\n\nn = Navmesh()\n\np1 = Position(0x01, 0x01, 0x01)\np2 = Position(0x01, 0x01, 0x02)\np3 = Position(0x01, 0x02, 0x02)\nNavmesh!(n, p1, p2, Down)\nNavmesh!(n, p2, p3, Right)\n\nroute(n, p1, p3)\n\n# output\n\n2-element Vector{Direction}:\n Down::Direction = 2\n Right::Direction = 1\n\n\n\n\n\n","category":"method"},{"location":"#Pokémon-Cartographer","page":"Overview","title":"Pokémon Cartographer","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Create a map and navmesh of Pokémon games by stumbling around the world and observing the game state.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Documentation Build Status Coverage\nDEV (Image: ) (Image: codecov)","category":"page"},{"location":"#How-it-works","page":"Overview","title":"How it works","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Initialize the globe with a single location (the starting location).\nPick a random place on the globe.\nFind a route from the current location to the selected location.\nGo there.\nOnce you arrive, bounce around.\nRecord all of the spaces you visit along the way.\nWhen time is up return your discovered spaces.\nGo back to (2).\nBonus points running this in parallel batches with Distributed.","category":"page"},{"location":"#BLUEMONS.GB","page":"Overview","title":"BLUEMONS.GB","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"To bootstrap an AI and decouple \"explore the world\" from \"play the game\" this project runs on top of the BLUEMONS.GB rom; a debug version of Pokémon Blue (sha1: 5b1456177671b79b263c614ea0e7cc9ac542e9c4). In this version of the game, you start with a party that has an Exeggutor which has all of the required HMs and can hold B to bypass any trainers.","category":"page"}]
}
